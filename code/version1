{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":13451,"databundleVersionId":1188070,"sourceType":"competition"}],"dockerImageVersionId":30627,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/zoibazia/ensemble-learning-for-ich?scriptVersionId=188240692\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import os\nimport gc\nimport cv2\nimport copy\nimport time\nimport random\n\n# For data manipulation\nimport numpy as np\nimport pandas as pd\n\n# Pytorch Imports\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\nfrom torch.cuda import amp\n\n# Utils\nimport joblib\nfrom tqdm import tqdm\nfrom collections import defaultdict\n\n# Sklearn Imports\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import StratifiedKFold, KFold\n\nimport time\n\n# Albumentations for augmentations\nimport albumentations as A\nfrom albumentations.pytorch import ToTensorV2\n\n# For colored terminal text\nfrom colorama import Fore, Back, Style\nc_ = Fore.CYAN\nsr_ = Style.RESET_ALL\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# For descriptive error messages\nos.environ['CUDA_LAUNCH_BLOCKING'] = \"1\"","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.status.busy":"2024-07-14T13:20:17.373277Z","iopub.execute_input":"2024-07-14T13:20:17.373525Z","iopub.status.idle":"2024-07-14T13:20:22.974027Z","shell.execute_reply.started":"2024-07-14T13:20:17.373502Z","shell.execute_reply":"2024-07-14T13:20:22.973045Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nimport glob, warnings\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, classification_report\nimport seaborn as sns\n\nwarnings.filterwarnings('ignore')\nprint('TensorFlow Version ' + tf.__version__)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:20:22.975665Z","iopub.execute_input":"2024-07-14T13:20:22.976056Z","iopub.status.idle":"2024-07-14T13:20:34.388856Z","shell.execute_reply.started":"2024-07-14T13:20:22.976031Z","shell.execute_reply":"2024-07-14T13:20:34.387769Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nimport os.path\nfrom pathlib import Path\n\nimport glob\n\nfrom PIL import Image\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras import regularizers\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\n\nfrom tensorflow.keras.optimizers import RMSprop,Adam,Optimizer\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D\nfrom tensorflow.keras.layers import BatchNormalization,Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D\nfrom tensorflow.keras import models\nfrom tensorflow.keras import layers\nimport tensorflow as tf\n\n\nfrom warnings import filterwarnings\n\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:20:34.39024Z","iopub.execute_input":"2024-07-14T13:20:34.39083Z","iopub.status.idle":"2024-07-14T13:20:34.402711Z","shell.execute_reply.started":"2024-07-14T13:20:34.390802Z","shell.execute_reply":"2024-07-14T13:20:34.401726Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ntrain = pd.read_csv(\"../input/rsna-intracranial-hemorrhage-detection/rsna-intracranial-hemorrhage-detection/stage_2_train.csv\")\nsub = pd.read_csv(\"../input/rsna-intracranial-hemorrhage-detection/rsna-intracranial-hemorrhage-detection/stage_2_sample_submission.csv\")\ntrain_images = os.listdir(\"../input/rsna-intracranial-hemorrhage-detection/rsna-intracranial-hemorrhage-detection/stage_2_train/\")\ntest_images = os.listdir(\"../input/rsna-intracranial-hemorrhage-detection/rsna-intracranial-hemorrhage-detection/stage_2_test/\")\nprint ('Train:', train.shape[0])\nprint ('Sub:', sub.shape[0])","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:20:34.405463Z","iopub.execute_input":"2024-07-14T13:20:34.406523Z","iopub.status.idle":"2024-07-14T13:20:47.253428Z","shell.execute_reply.started":"2024-07-14T13:20:34.406483Z","shell.execute_reply":"2024-07-14T13:20:47.252539Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\ntrain['type'] = train['ID'].str.split(\"_\", n = 3, expand = True)[2]\ntrain['PatientID'] = train['ID'].str.split(\"_\", n = 3, expand = True)[1]\ntrain['filename'] = train['ID'].apply(lambda st: \"ID_\" + st.split('_')[1] + \".png\")\n# Remove invalid PNGs\ntrain=train.head(150000)\n\n\nsub['filename'] = sub['ID'].apply(lambda st: \"ID_\" + st.split('_')[1] + \".png\")\nsub['type'] = sub['ID'].apply(lambda st: st.split('_')[2])\nsub=sub.head(150000)\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:20:47.254698Z","iopub.execute_input":"2024-07-14T13:20:47.254977Z","iopub.status.idle":"2024-07-14T13:21:20.249563Z","shell.execute_reply.started":"2024-07-14T13:20:47.254954Z","shell.execute_reply":"2024-07-14T13:21:20.248556Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print ('Train type =', list(train.type.unique()))\nprint ('Train label =', list(train.Label.unique()))","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:20.251261Z","iopub.execute_input":"2024-07-14T13:21:20.251558Z","iopub.status.idle":"2024-07-14T13:21:20.27953Z","shell.execute_reply.started":"2024-07-14T13:21:20.251531Z","shell.execute_reply":"2024-07-14T13:21:20.278481Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print ('Number of Patients: ', train.PatientID.nunique())","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:20.280569Z","iopub.execute_input":"2024-07-14T13:21:20.280838Z","iopub.status.idle":"2024-07-14T13:21:20.311738Z","shell.execute_reply.started":"2024-07-14T13:21:20.280815Z","shell.execute_reply":"2024-07-14T13:21:20.310892Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.type.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:20.312729Z","iopub.execute_input":"2024-07-14T13:21:20.313007Z","iopub.status.idle":"2024-07-14T13:21:20.349Z","shell.execute_reply.started":"2024-07-14T13:21:20.312984Z","shell.execute_reply":"2024-07-14T13:21:20.348164Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nprint(train.Label.value_counts())\nsns.countplot(x='Label', data=train)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:20.350086Z","iopub.execute_input":"2024-07-14T13:21:20.35043Z","iopub.status.idle":"2024-07-14T13:21:20.603035Z","shell.execute_reply.started":"2024-07-14T13:21:20.350398Z","shell.execute_reply":"2024-07-14T13:21:20.602207Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.groupby('type').Label.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:20.606653Z","iopub.execute_input":"2024-07-14T13:21:20.606932Z","iopub.status.idle":"2024-07-14T13:21:20.645378Z","shell.execute_reply.started":"2024-07-14T13:21:20.606907Z","shell.execute_reply":"2024-07-14T13:21:20.644561Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train.type.value_counts().plot.pie(figsize=(6,6))\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:20.646464Z","iopub.execute_input":"2024-07-14T13:21:20.646782Z","iopub.status.idle":"2024-07-14T13:21:20.829612Z","shell.execute_reply.started":"2024-07-14T13:21:20.646757Z","shell.execute_reply":"2024-07-14T13:21:20.828309Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nTRAIN_IMG_PATH = \"../input/rsna-intracranial-hemorrhage-detection/rsna-intracranial-hemorrhage-detection/stage_2_train/\"\nTEST_IMG_PATH = \"../input/rsna-intracranial-hemorrhage-detection/rsna-intracranial-hemorrhage-detection/stage_2_test/\"\nBASE_PATH = '../input/rsna-intracranial-hemorrhage-detection/rsna-intracranial-hemorrhage-detection/'\nTRAIN_DIR = 'stage_2_train/'\nTEST_DIR = 'stage_2_test/'\n\ndef window_image(img, window_center,window_width, intercept, slope, rescale=True):\n\n    img = (img*slope +intercept)\n    img_min = window_center - window_width//2\n    img_max = window_center + window_width//2\n    img[img<img_min] = img_min\n    img[img>img_max] = img_max\n    \n    if rescale:\n        # Extra rescaling to 0-1, not in the original notebook\n        img = (img - img_min) / (img_max - img_min)\n    \n    return img\n    \ndef get_first_of_dicom_field_as_int(x):\n    #get x[0] as in int is x is a 'pydicom.multival.MultiValue', otherwise get int(x)\n    if type(x) == pydicom.multival.MultiValue:\n        return int(x[0])\n    else:\n        return int(x)\n\ndef get_windowing(data):\n    dicom_fields = [data[('0028','1050')].value, #window center\n                    data[('0028','1051')].value, #window width\n                    data[('0028','1052')].value, #intercept\n                    data[('0028','1053')].value] #slope\n    return [get_first_of_dicom_field_as_int(x) for x in dicom_fields]\n\n    \n    \ndef view_images(images, title = '', aug = None):\n    width = 5\n    height = 2\n    fig, axs = plt.subplots(height, width, figsize=(15,5))\n    \n    for im in range(0, height * width):\n        data = pydicom.read_file(os.path.join(TRAIN_IMG_PATH,'ID_'+images[im]+ '.dcm'))\n        image = data.pixel_array\n        window_center , window_width, intercept, slope = get_windowing(data)\n        image_windowed = window_image(image, window_center, window_width, intercept, slope)\n\n\n        i = im // width\n        j = im % width\n        axs[i,j].imshow(image_windowed, cmap=plt.cm.bone) \n        axs[i,j].axis('off')\n        \n    plt.suptitle(title)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:20.831851Z","iopub.execute_input":"2024-07-14T13:21:20.832913Z","iopub.status.idle":"2024-07-14T13:21:20.855531Z","shell.execute_reply.started":"2024-07-14T13:21:20.832862Z","shell.execute_reply":"2024-07-14T13:21:20.854312Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pydicom\ncase = 8\ndata = pydicom.dcmread(TRAIN_IMG_PATH+train_images[case])\n\nprint(\"data\",data)\nwindow_center , window_width, intercept, slope = get_windowing(data)\n\n\n#displaying the image\nimg = pydicom.read_file(TRAIN_IMG_PATH+train_images[case]).pixel_array\n\nimg = window_image(img, window_center, window_width, intercept, slope)\nplt.imshow(img, cmap=plt.cm.bone)\nplt.grid(False)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:20.85703Z","iopub.execute_input":"2024-07-14T13:21:20.858099Z","iopub.status.idle":"2024-07-14T13:21:21.231582Z","shell.execute_reply.started":"2024-07-14T13:21:20.858052Z","shell.execute_reply":"2024-07-14T13:21:21.2307Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"view_images(train[(train['type'] == 'epidural') & (train['Label'] == 1)][:10].PatientID.values, title = 'Images with epidural')","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:21.232739Z","iopub.execute_input":"2024-07-14T13:21:21.233079Z","iopub.status.idle":"2024-07-14T13:21:21.99087Z","shell.execute_reply.started":"2024-07-14T13:21:21.233047Z","shell.execute_reply":"2024-07-14T13:21:21.989952Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"view_images(train[(train['type'] == 'intraparenchymal') & (train['Label'] == 1)][:10].PatientID.values, title = 'Images with intraparenchymal')","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:21.992085Z","iopub.execute_input":"2024-07-14T13:21:21.9924Z","iopub.status.idle":"2024-07-14T13:21:22.730615Z","shell.execute_reply.started":"2024-07-14T13:21:21.992373Z","shell.execute_reply":"2024-07-14T13:21:22.729717Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"view_images(train[(train['type'] == 'subarachnoid') & (train['Label'] == 1)][:10].PatientID.values, title = 'Images with subarachnoid')","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:22.731823Z","iopub.execute_input":"2024-07-14T13:21:22.732092Z","iopub.status.idle":"2024-07-14T13:21:23.379043Z","shell.execute_reply.started":"2024-07-14T13:21:22.732067Z","shell.execute_reply":"2024-07-14T13:21:23.378184Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"view_images(train[(train['type'] == 'subdural') & (train['Label'] == 1)][:10].PatientID.values, title = 'Images with subdural')","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:23.380373Z","iopub.execute_input":"2024-07-14T13:21:23.380715Z","iopub.status.idle":"2024-07-14T13:21:23.994033Z","shell.execute_reply.started":"2024-07-14T13:21:23.380685Z","shell.execute_reply":"2024-07-14T13:21:23.993116Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test = pd.DataFrame(sub.filename.unique(), columns=['filename'])\nprint ('Test:', test.shape[0])\ntest.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:23.995372Z","iopub.execute_input":"2024-07-14T13:21:23.995967Z","iopub.status.idle":"2024-07-14T13:21:24.021665Z","shell.execute_reply.started":"2024-07-14T13:21:23.99593Z","shell.execute_reply":"2024-07-14T13:21:24.020798Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"np.random.seed(1234)\nsample_files = np.random.choice(os.listdir(TRAIN_IMG_PATH), 150000)\nsample_df = train[train.filename.apply(lambda x: x.replace('.png', '.dcm')).isin(sample_files)]\nprint(sample_df.shape)\n\npivot_df = sample_df[['Label', 'filename', 'type']].drop_duplicates().pivot(\n    index='filename', columns='type', values='Label').reset_index()\nprint(pivot_df.shape)\npivot_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:24.022798Z","iopub.execute_input":"2024-07-14T13:21:24.023077Z","iopub.status.idle":"2024-07-14T13:21:25.342248Z","shell.execute_reply.started":"2024-07-14T13:21:24.023053Z","shell.execute_reply":"2024-07-14T13:21:25.341331Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"np.random.seed(1234)\nsample_files_test = np.random.choice(os.listdir(TEST_IMG_PATH), 150000)\nsample_files_test_df = sub[sub.filename.apply(lambda x: x.replace('.png', '.dcm')).isin(sample_files_test)]\nprint(sample_files_test_df.shape)\n\npivot_test_df = sample_files_test_df[['Label', 'filename', 'type']].drop_duplicates().pivot(\n    index='filename', columns='type', values='Label').reset_index()\nprint(pivot_test_df.shape)\npivot_test_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:25.34348Z","iopub.execute_input":"2024-07-14T13:21:25.343815Z","iopub.status.idle":"2024-07-14T13:21:25.690425Z","shell.execute_reply.started":"2024-07-14T13:21:25.343789Z","shell.execute_reply":"2024-07-14T13:21:25.689501Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def save_and_resize(filenames, load_dir):    \n    save_dir = '/kaggle/tmp/'\n    if not os.path.exists(save_dir):\n        os.makedirs(save_dir)\n\n    for filename in tqdm(filenames):\n        path = load_dir + filename\n        new_path = save_dir + filename.replace('.dcm', '.png')\n        \n        dcm = pydicom.dcmread(path)\n        window_center , window_width, intercept, slope = get_windowing(dcm)\n        img = dcm.pixel_array\n        img = window_image(img, window_center, window_width, intercept, slope)\n        \n        resized = cv2.resize(img, (224, 224))\n        res = cv2.imwrite(new_path, resized)\n        if not res:\n            print('Failed')","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:25.691587Z","iopub.execute_input":"2024-07-14T13:21:25.691882Z","iopub.status.idle":"2024-07-14T13:21:25.698579Z","shell.execute_reply.started":"2024-07-14T13:21:25.691857Z","shell.execute_reply":"2024-07-14T13:21:25.697639Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tqdm import tqdm\nimport json\nimport cv2\n\nsave_and_resize(filenames=sample_files, load_dir=BASE_PATH + TRAIN_DIR)\nsave_and_resize(filenames=sample_files_test, load_dir=BASE_PATH + TEST_DIR)\n#save_and_resize(filenames=os.listdir(BASE_PATH + TEST_DIR), load_dir=BASE_PATH + TEST_DIR)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T13:21:25.699683Z","iopub.execute_input":"2024-07-14T13:21:25.699953Z","iopub.status.idle":"2024-07-14T15:12:59.625405Z","shell.execute_reply.started":"2024-07-14T13:21:25.69993Z","shell.execute_reply":"2024-07-14T15:12:59.623224Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"BATCH_SIZE = 16\n\ndef create_datagen():\n    return ImageDataGenerator(\n        zoom_range=0.1,  # set range for random zoom\n        # set mode for filling points outside the input boundaries\n        fill_mode='constant',\n        cval=0.,  # value used for fill_mode = \"constant\"\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=True,  # randomly flip images,\n        validation_split=0.25\n    )\n\ndef create_test_gen():\n    return ImageDataGenerator().flow_from_dataframe(\n        test,\n        directory='/kaggle/tmp/',\n        x_col='filename',\n        class_mode=None,\n        target_size=(224, 224),\n        batch_size=BATCH_SIZE,\n        shuffle=False\n    )\n\ndef create_flow(datagen, subset):\n    return datagen.flow_from_dataframe(\n        pivot_df, \n        directory='/kaggle/tmp/',\n        x_col='filename', \n        y_col=['any', 'epidural', 'intraparenchymal', \n               'intraventricular', 'subarachnoid', 'subdural'],\n        class_mode='other',\n        target_size=(224, 224),\n        batch_size=BATCH_SIZE,\n        subset=subset\n    )\n\n# Using original generator\ndata_generator = create_datagen()\ntrain_gen = create_flow(data_generator, 'training')\nval_gen = create_flow(data_generator, 'validation')\ntest_gen = create_test_gen()","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:12:59.630657Z","iopub.execute_input":"2024-07-14T15:12:59.630956Z","iopub.status.idle":"2024-07-14T15:13:00.058282Z","shell.execute_reply.started":"2024-07-14T15:12:59.630931Z","shell.execute_reply":"2024-07-14T15:13:00.057563Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# checking training set and its output\nfor data_batch,label_batch in train_gen:\n    print(\"DATA SHAPE: \",data_batch.shape)\n    print(\"LABEL SHAPE: \",label_batch.shape)\n    break","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:13:00.059334Z","iopub.execute_input":"2024-07-14T15:13:00.059617Z","iopub.status.idle":"2024-07-14T15:13:00.356533Z","shell.execute_reply.started":"2024-07-14T15:13:00.059593Z","shell.execute_reply":"2024-07-14T15:13:00.355591Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# check validation set and its output\nfor data_batch,label_batch in val_gen:\n    print(\"DATA SHAPE: \",data_batch.shape)\n    print(\"LABEL SHAPE: \",label_batch.shape)\n    break","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:13:00.357718Z","iopub.execute_input":"2024-07-14T15:13:00.358081Z","iopub.status.idle":"2024-07-14T15:13:00.617478Z","shell.execute_reply.started":"2024-07-14T15:13:00.358032Z","shell.execute_reply":"2024-07-14T15:13:00.616587Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:13:00.618697Z","iopub.execute_input":"2024-07-14T15:13:00.619051Z","iopub.status.idle":"2024-07-14T15:13:00.623453Z","shell.execute_reply.started":"2024-07-14T15:13:00.61902Z","shell.execute_reply":"2024-07-14T15:13:00.622604Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(\n data_batch, label_batch, test_size=0.33, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:13:00.624615Z","iopub.execute_input":"2024-07-14T15:13:00.624949Z","iopub.status.idle":"2024-07-14T15:13:00.638257Z","shell.execute_reply.started":"2024-07-14T15:13:00.624918Z","shell.execute_reply":"2024-07-14T15:13:00.637384Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:13:00.644431Z","iopub.execute_input":"2024-07-14T15:13:00.644678Z","iopub.status.idle":"2024-07-14T15:13:00.650043Z","shell.execute_reply.started":"2024-07-14T15:13:00.644657Z","shell.execute_reply":"2024-07-14T15:13:00.649225Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.applications import xception\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:13:00.651019Z","iopub.execute_input":"2024-07-14T15:13:00.651316Z","iopub.status.idle":"2024-07-14T15:13:00.662047Z","shell.execute_reply.started":"2024-07-14T15:13:00.651292Z","shell.execute_reply":"2024-07-14T15:13:00.661347Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.applications import ResNet50\n\n# Load the ResNet50 model\nbranch1 = ResNet50()\n\nbranch1.layers.pop()\n\n# Freeze the layers of the pre-trained model\nfor layer in branch1.layers:\n    layer.trainable = False\n\n# Get the output of the second to last layer\nlast = branch1.layers[-2].output\n\n# Add a custom classification head\nx = Dense(6, activation=\"relu\")(last)\n\n# Create the final model\nfinetuned_model_1 = Model(branch1.input, x, name=\"Branch 1\")\nfinetuned_model_1.summary()\nfinetuned_model_1.compile(optimizer=Adam(lr=0.0001), loss='binary_crossentropy', metrics=['accuracy', 'mse', 'mae', 'mape', 'cosine'])\n\ncheckpoint = ModelCheckpoint(\n    'model.h5', \n    monitor='val_loss', \n    verbose=0, \n    save_best_only=True, \n    save_weights_only=False,\n    mode='auto'\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:13:00.663134Z","iopub.execute_input":"2024-07-14T15:13:00.663527Z","iopub.status.idle":"2024-07-14T15:13:05.267694Z","shell.execute_reply.started":"2024-07-14T15:13:00.663486Z","shell.execute_reply":"2024-07-14T15:13:05.266689Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.applications import MobileNetV2\n\n# Load the MobileNetV2 model\nbranch2 = MobileNetV2()\nbranch2.layers.pop()\n\n# Freeze the layers of the pre-trained model\nfor layer in branch2.layers:\n    layer.trainable = False\n\n# Get the output of the second to last layer\nlast = branch2.layers[-2].output\n\n# Add a custom classification head\nx = Dense(6, activation=\"softmax\")(last)\n\n# Create the final model\nfinetuned_model_2 = Model(branch2.input, x, name=\"Branch 2\")\nfinetuned_model_2.summary()\nfinetuned_model_2.compile(optimizer=Adam(lr=0.0001), loss='binary_crossentropy', metrics=['accuracy', 'mse', 'mae', 'mape', 'cosine'])\n\ncheckpoint = ModelCheckpoint(\n    'model.h5', \n    monitor='val_loss', \n    verbose=0, \n    save_best_only=True, \n    save_weights_only=False,\n    mode='auto'\n)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:13:05.268895Z","iopub.execute_input":"2024-07-14T15:13:05.269193Z","iopub.status.idle":"2024-07-14T15:13:07.521815Z","shell.execute_reply.started":"2024-07-14T15:13:05.269147Z","shell.execute_reply":"2024-07-14T15:13:07.520867Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.layers import concatenate\n\n\nprint('Getting training features and concatenation---------------start')\nmodel1= Model(branch1.input, branch1.layers[-2].output)\nmodel1_features=model1.predict(train_gen)\nmodel1_features=pd.DataFrame(model1_features)\nprint(\"Branch1_features\", model1_features.shape)\n\nmodel2= Model(branch2.input, branch2.layers[-2].output)\nmodel2_features=model2.predict(train_gen)\nmodel2_features=pd.DataFrame(model2_features)\nprint(\"Branch2_features\", model2_features.shape)\n\nconcatenated_features=pd.concat([model1_features,model2_features], axis=1)\nprint(\"Combined_features\", concatenated_features.shape)\n\nprint('Getting validation features and concatenation---------------start')\nmodel1= Model(branch1.input, branch1.layers[-2].output)\nmodel1_val_features=model1.predict(val_gen)\nmodel1_val_features=pd.DataFrame(model1_val_features)\nprint(\"Branch1_val_features\", model1_val_features.shape)\n\nmodel2= Model(branch2.input, branch2.layers[-2].output)\nmodel2_val_features=model2.predict(val_gen)\nmodel2_val_features=pd.DataFrame(model2_val_features)\nprint(\"Branch2_val_features\", model2_val_features.shape)\n\nconcatenated_val_features=pd.concat([model1_val_features,model2_val_features], axis=1)\nprint(\"Combined_val_features\", concatenated_val_features.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:13:07.52324Z","iopub.execute_input":"2024-07-14T15:13:07.523512Z","iopub.status.idle":"2024-07-14T15:15:13.235083Z","shell.execute_reply.started":"2024-07-14T15:13:07.523486Z","shell.execute_reply":"2024-07-14T15:15:13.234162Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nfeature_train_labels=pd.DataFrame(train_gen.labels)\nprint(feature_train_labels)\n\n\nfeature_test_labels=pd.DataFrame(val_gen.labels)\nlen(feature_test_labels.shape)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:15:13.236133Z","iopub.execute_input":"2024-07-14T15:15:13.236412Z","iopub.status.idle":"2024-07-14T15:15:13.247312Z","shell.execute_reply.started":"2024-07-14T15:15:13.23639Z","shell.execute_reply":"2024-07-14T15:15:13.246181Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import f1_score, recall_score, precision_score\n\nknn = KNeighborsClassifier(n_neighbors=7)\n\nknn.fit(concatenated_features,feature_train_labels)\nknn.fit(concatenated_val_features,feature_test_labels)\nprint(\"done training\")\n\npred_knn= knn.predict(concatenated_val_features)\nprint(\"pred_KNN\",pred_knn.shape)\n\n\naccuracy=metrics.accuracy_score(feature_test_labels,pred_knn.round())\nprint(\"Accuracy of combined model with KNN: {0:0.4f}\".format(accuracy*100))\n\nf1score=f1_score(pred_knn,feature_test_labels, average='weighted')\nprint(\"F1score of combined model with KNN: {0:0.4f}\".format( f1score*10))\n\nrecall = recall_score(feature_test_labels,pred_knn, average='weighted')\nprint('Recall score of combined model with KNN: {0:0.4f}'.format(recall*10))\n\nprecision = precision_score(pred_knn.round(),feature_test_labels,average='weighted')\nprint('Precision of combined model with KNN: {0:0.4f}'.format(precision*10))\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:20:50.094373Z","iopub.execute_input":"2024-07-14T15:20:50.094725Z","iopub.status.idle":"2024-07-14T15:20:50.711805Z","shell.execute_reply.started":"2024-07-14T15:20:50.094696Z","shell.execute_reply":"2024-07-14T15:20:50.71094Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"concatenated_features_1=pd.concat([model1_features,model1_features], axis=1)\nprint(\"Combined_features\", concatenated_features_1.shape)\n\nconcatenated_val_features_1=pd.concat([model1_val_features,model1_val_features], axis=1)\nprint(\"Combined_val_features\", concatenated_val_features_1.shape)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:15:14.07881Z","iopub.execute_input":"2024-07-14T15:15:14.079096Z","iopub.status.idle":"2024-07-14T15:15:14.242961Z","shell.execute_reply.started":"2024-07-14T15:15:14.079072Z","shell.execute_reply":"2024-07-14T15:15:14.242059Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import precision_score, f1_score, recall_score\n\nknn1 = KNeighborsClassifier(n_neighbors=7)\n\nknn1.fit(concatenated_features_1,feature_train_labels)\nprint(\"done training\")\n\npred_knn1= knn1.predict(concatenated_val_features_1)\nprint(\"pred_KNN\",pred_knn.shape)\n\n\naccuracy=metrics.accuracy_score(feature_test_labels,pred_knn1.round())\nprint(\"Accuracy of combined model with KNN: {0:0.4f}\".format(accuracy*100))\n\nf1score=f1_score(pred_knn1,feature_test_labels, average='weighted')\nprint(\"F1score of combined model with KNN: {0:0.4f}\".format( f1score*10))\n\n\nrecall = recall_score(feature_test_labels,pred_knn1, average='weighted')\nprint('Recall score of combined model with KNN: {0:0.4f}'.format(recall*10))\n\n\nprecision = precision_score(pred_knn1.round(),feature_test_labels,average='weighted')\nprint('Precision of combined model with KNN: {0:0.4f}'.format(precision*10))\n ","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:21:00.416285Z","iopub.execute_input":"2024-07-14T15:21:00.417163Z","iopub.status.idle":"2024-07-14T15:21:01.227215Z","shell.execute_reply.started":"2024-07-14T15:21:00.417129Z","shell.execute_reply":"2024-07-14T15:21:01.226184Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import f1_score, recall_score, precision_score, accuracy_score\n\n\ndt_classifier = DecisionTreeClassifier(random_state=42)\n\n\ndt_classifier.fit(concatenated_features, feature_train_labels)\nprint(\"done training\")\n\n\npred_dt = dt_classifier.predict(concatenated_val_features)\nprint(\"pred_DT\", pred_dt.shape)\n\n\naccuracy = accuracy_score(feature_test_labels, pred_dt)\nprint(\"Accuracy of combined model with Decision Tree: {0:0.4f}\".format(accuracy * 100))\n\n\nf1score = f1_score(feature_test_labels, pred_dt, average='weighted')\nprint(\"F1score of combined model with Decision Tree: {0:0.4f}\".format(f1score ))\n\n\nrecall = recall_score(feature_test_labels, pred_dt, average='weighted')\nprint('Recall score of combined model with Decision Tree: {0:0.4f}'.format(recall ))\n\nprecision = precision_score(feature_test_labels, pred_dt, average='weighted')\nprint('Precision of combined model with Decision Tree: {0:0.4f}'.format(precision ))\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(\n data_batch, label_batch, test_size=0.40, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:21:06.221221Z","iopub.execute_input":"2024-07-14T15:21:06.221577Z","iopub.status.idle":"2024-07-14T15:21:06.229186Z","shell.execute_reply.started":"2024-07-14T15:21:06.221551Z","shell.execute_reply":"2024-07-14T15:21:06.228326Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.layers import concatenate\n\n\nprint('Getting training features and concatenation---------------start')\nmodel1= Model(branch1.input, branch1.layers[-2].output)\nmodel1_features=model1.predict(train_gen)\nmodel1_features=pd.DataFrame(model1_features)\nprint(\"Branch1_features\", model1_features.shape)\n\nmodel2= Model(branch2.input, branch2.layers[-2].output)\nmodel2_features=model2.predict(train_gen)\nmodel2_features=pd.DataFrame(model2_features)\nprint(\"Branch2_features\", model2_features.shape)\n\nconcatenated_features=pd.concat([model1_features,model2_features], axis=1)\nprint(\"Combined_features\", concatenated_features.shape)\n\nprint('Getting validation features and concatenation---------------start')\nmodel1= Model(branch1.input, branch1.layers[-2].output)\nmodel1_val_features=model1.predict(val_gen)\nmodel1_val_features=pd.DataFrame(model1_val_features)\nprint(\"Branch1_val_features\", model1_val_features.shape)\n\nmodel2= Model(branch2.input, branch2.layers[-2].output)\nmodel2_val_features=model2.predict(val_gen)\nmodel2_val_features=pd.DataFrame(model2_val_features)\nprint(\"Branch2_val_features\", model2_val_features.shape)\n\nconcatenated_val_features=pd.concat([model1_val_features,model2_val_features], axis=1)\nprint(\"Combined_val_features\", concatenated_val_features.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:21:47.513032Z","iopub.execute_input":"2024-07-14T15:21:47.51392Z","iopub.status.idle":"2024-07-14T15:23:46.146109Z","shell.execute_reply.started":"2024-07-14T15:21:47.513883Z","shell.execute_reply":"2024-07-14T15:23:46.145214Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"feature_train_labels=pd.DataFrame(train_gen.labels)\nprint(feature_train_labels)\n\n\nfeature_test_labels=pd.DataFrame(val_gen.labels)\nlen(feature_test_labels.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:23:46.147704Z","iopub.execute_input":"2024-07-14T15:23:46.148Z","iopub.status.idle":"2024-07-14T15:23:46.158249Z","shell.execute_reply.started":"2024-07-14T15:23:46.147974Z","shell.execute_reply":"2024-07-14T15:23:46.157317Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import f1_score, recall_score, precision_score\n\nknn = KNeighborsClassifier(n_neighbors=7)\n\nknn.fit(concatenated_features,feature_train_labels)\nknn.fit(concatenated_val_features,feature_test_labels)\nprint(\"done training\")\n\npred_knn= knn.predict(concatenated_val_features)\nprint(\"pred_KNN\",pred_knn.shape)\n\n\naccuracy=metrics.accuracy_score(feature_test_labels,pred_knn.round())\nprint(\"Accuracy of combined model with KNN: {0:0.4f}\".format(accuracy*100))\n\nf1score=f1_score(pred_knn,feature_test_labels, average='weighted')\nprint(\"F1score of combined model with KNN: {0:0.4f}\".format( f1score*10))\n\nrecall = recall_score(feature_test_labels,pred_knn, average='weighted')\nprint('Recall score of combined model with KNN: {0:0.4f}'.format(recall*10))\n\nprecision = precision_score(pred_knn.round(),feature_test_labels,average='weighted')\nprint('Precision of combined model with KNN: {0:0.4f}'.format(precision*10))","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:23:46.159284Z","iopub.execute_input":"2024-07-14T15:23:46.159521Z","iopub.status.idle":"2024-07-14T15:23:46.863481Z","shell.execute_reply.started":"2024-07-14T15:23:46.1595Z","shell.execute_reply":"2024-07-14T15:23:46.862592Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"concatenated_features_1=pd.concat([model1_features,model1_features], axis=1)\nprint(\"Combined_features\", concatenated_features_1.shape)\n\nconcatenated_val_features_1=pd.concat([model1_val_features,model1_val_features], axis=1)\nprint(\"Combined_val_features\", concatenated_val_features_1.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:23:46.865555Z","iopub.execute_input":"2024-07-14T15:23:46.865845Z","iopub.status.idle":"2024-07-14T15:23:46.972299Z","shell.execute_reply.started":"2024-07-14T15:23:46.865819Z","shell.execute_reply":"2024-07-14T15:23:46.971332Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import precision_score, f1_score, recall_score\n\nknn1 = KNeighborsClassifier(n_neighbors=7)\n\nknn1.fit(concatenated_features_1,feature_train_labels)\nprint(\"done training\")\n\npred_knn1= knn1.predict(concatenated_val_features_1)\nprint(\"pred_KNN\",pred_knn.shape)\n\n\naccuracy=metrics.accuracy_score(feature_test_labels,pred_knn1.round())\nprint(\"Accuracy of model 1 with KNN: {0:0.4f}\".format(accuracy*100))\n\nf1score=f1_score(pred_knn1,feature_test_labels, average='weighted')\nprint(\"F1score of model 1 with KNN: {0:0.4f}\".format( f1score*10))\n\n\nrecall = recall_score(feature_test_labels,pred_knn1, average='weighted')\nprint('Recall score of model 1 with KNN: {0:0.4f}'.format(recall*10))\n\n\nprecision = precision_score(pred_knn1.round(),feature_test_labels,average='weighted')\nprint('Precision of model 1 with KNN: {0:0.4f}'.format(precision*10))","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:24:11.210183Z","iopub.execute_input":"2024-07-14T15:24:11.21103Z","iopub.status.idle":"2024-07-14T15:24:12.023432Z","shell.execute_reply.started":"2024-07-14T15:24:11.210994Z","shell.execute_reply":"2024-07-14T15:24:12.022534Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import f1_score, recall_score, precision_score, accuracy_score\n\n\ndt_classifier = DecisionTreeClassifier(random_state=42)\n\ndt_classifier.fit(concatenated_features, feature_train_labels)\nprint(\"done training\")\n\npred_dt = dt_classifier.predict(concatenated_val_features)\nprint(\"pred_DT\", pred_dt.shape)\n\naccuracy = accuracy_score(feature_test_labels, pred_dt)\nprint(\"Accuracy of combined model with Decision Tree: {0:0.4f}\".format(accuracy * 100))\n\nf1score = f1_score(feature_test_labels, pred_dt, average='weighted')\nprint(\"F1score of combined model with Decision Tree: {0:0.4f}\".format(f1score ))\n\nrecall = recall_score(feature_test_labels, pred_dt, average='weighted')\nprint('Recall score of combined model with Decision Tree: {0:0.4f}'.format(recall ))\n\nprecision = precision_score(feature_test_labels, pred_dt, average='weighted')\nprint('Precision of combined model with Decision Tree: {0:0.4f}'.format(precision ))\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T15:29:13.206355Z","iopub.execute_input":"2024-07-14T15:29:13.206971Z","iopub.status.idle":"2024-07-14T15:31:16.799243Z","shell.execute_reply.started":"2024-07-14T15:29:13.20693Z","shell.execute_reply":"2024-07-14T15:31:16.798216Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\n\nrf_classifier = RandomForestClassifier(n_estimators=95)\n\nmulti_rf_classifier = OneVsRestClassifier(rf_classifier)\n\nmulti_rf_classifier.fit(concatenated_features, feature_train_labels)\nmulti_rf_classifier.fit(concatenated_val_features, feature_test_labels)\nprint(\"done training\")\n\npred_rf = multi_rf_classifier.predict(concatenated_val_features)\nprint(\"pred_RF\", pred_rf.shape)\n\naccuracy = accuracy_score(feature_test_labels, pred_rf)\nprint(\"Accuracy of combined model with Random Forest: {0:0.4f}\".format(accuracy * 100))\n\nf1score = f1_score(feature_test_labels, pred_rf, average='weighted')\nprint(\"F1score of combined model with Random Forest: {0:0.4f}\".format(f1score))\n\nrecall = recall_score(feature_test_labels, pred_rf, average='weighted')\nprint('Recall score of combined model with Random Forest: {0:0.4f}'.format(recall))\n\nprecision = precision_score(feature_test_labels, pred_rf, average='weighted')\nprint('Precision of combined model with Random Forest: {0:0.4f}'.format(precision))\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T16:11:24.916745Z","iopub.execute_input":"2024-07-14T16:11:24.917672Z","iopub.status.idle":"2024-07-14T16:14:21.124981Z","shell.execute_reply.started":"2024-07-14T16:11:24.917628Z","shell.execute_reply":"2024-07-14T16:14:21.123866Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.multiclass import OneVsRestClassifier\n\nada_classifier = AdaBoostClassifier(n_estimators=100)\n\nmulti_ada_classifier = OneVsRestClassifier(ada_classifier)\n\nmulti_ada_classifier.fit(concatenated_features, feature_train_labels)\nprint(\"done training\")\n\npred_ada = multi_ada_classifier.predict(concatenated_val_features)\nprint(\"pred_AdaBoost\", pred_ada.shape)\n\naccuracy = accuracy_score(feature_test_labels, pred_ada)\nprint(\"Accuracy of combined model with AdaBoost: {0:0.4f}\".format(accuracy * 100))\n\nf1score = f1_score(feature_test_labels, pred_ada, average='weighted')\nprint(\"F1score of combined model with AdaBoost: {0:0.4f}\".format(f1score*10))\n\nrecall = recall_score(feature_test_labels, pred_ada, average='weighted')\nprint('Recall score of combined model with AdaBoost: {0:0.4f}'.format(recall*10))\n\nprecision = precision_score(feature_test_labels, pred_ada, average='weighted')\nprint('Precision of combined model with AdaBoost: {0:0.4f}'.format(precision*10))\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T17:03:48.292436Z","iopub.execute_input":"2024-07-14T17:03:48.293458Z","iopub.status.idle":"2024-07-14T17:11:10.55785Z","shell.execute_reply.started":"2024-07-14T17:03:48.293423Z","shell.execute_reply":"2024-07-14T17:11:10.556722Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.metrics import f1_score, recall_score, precision_score, accuracy_score\n\nlogreg_classifier = LogisticRegression()\n\nmulti_logreg_classifier = OneVsRestClassifier(logreg_classifier)\n\nmulti_logreg_classifier.fit(concatenated_features, feature_train_labels)\nprint(\"done training\")\n\npred_logreg = multi_logreg_classifier.predict(concatenated_val_features)\nprint(\"pred_LogReg\", pred_logreg.shape)\n\naccuracy = accuracy_score(feature_test_labels, pred_logreg)\nprint(\"Accuracy of combined model with Logistic Regression: {0:0.4f}\".format(accuracy * 100))\n\nf1score = f1_score(feature_test_labels, pred_logreg, average='weighted')\nprint(\"F1score of combined model with Logistic Regression: {0:0.4f}\".format(f1score*10))\n\nrecall = recall_score(feature_test_labels, pred_logreg, average='weighted')\nprint('Recall score of combined model with Logistic Regression: {0:0.4f}'.format(recall * 10))\n\nprecision = precision_score(feature_test_labels, pred_logreg, average='weighted')\nprint('Precision of combined model with Logistic Regression: {0:0.4f}'.format(precision * 10))\n","metadata":{"execution":{"iopub.status.busy":"2024-07-14T17:14:56.205865Z","iopub.execute_input":"2024-07-14T17:14:56.206282Z","iopub.status.idle":"2024-07-14T17:15:03.566821Z","shell.execute_reply.started":"2024-07-14T17:14:56.206248Z","shell.execute_reply":"2024-07-14T17:15:03.565821Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}